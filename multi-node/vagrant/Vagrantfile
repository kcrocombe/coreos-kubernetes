# -*- mode: ruby -*-
# # vi: set ft=ruby :

# for arg in ARGV
# 	puts arg
# end

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

# KJC : Make sure the vagrant-ignition plugin is installed

required_plugins = %w(vagrant-ignition)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

# Note: these variables will usually be over-ridden by the values readin via config.rb
$update_channel = "alpha"
$controller_count = 1
$controller_vm_memory = 1024
$worker_count = 1
$worker_vm_memory = 1024
$etcd_count = 1
$etcd_vm_memory = 512
$baseIp="172.17.4"


#These are the CT scriprs and Ignition Files that will be injected into our provisioned server
#
HOME = File.dirname(__FILE__)
IGNITION_DRIVE_ROOT = File.join(HOME,".IgnitionVirtualDisks")

SSL_DIR=File.join(HOME,"ssl")

if ! File.exist?(IGNITION_DRIVE_ROOT)
	FileUtils.mkdir_p IGNITION_DRIVE_ROOT
end

CT_ETC_PATH= File.join(HOME, "etcd.ct")
IGNITION_ETC_PATH= File.join(IGNITION_DRIVE_ROOT, "etcd.ign")

CT_WORKER_PATH= File.join(HOME, "worker.ct")
IGNITION_WORKER_PATH = File.join(IGNITION_DRIVE_ROOT, "worker.ign")

CT_CONTROLLER_PATH= File.join(HOME, "controller.ct")
IGNITION_CONTROLLER_PATH = File.join(IGNITION_DRIVE_ROOT, "controller.ign")

WORKER_ENV_OPTIONS = File.expand_path("workerCtFiles/options.env")
CONTROLLER_ENV_OPTIONS = File.expand_path("controllerCtFiles/options.env")


CONFIG = File.expand_path("config.rb")
if File.exist?(CONFIG)
  require CONFIG
end

if $worker_vm_memory < 1024
  puts "Workers should have at least 1024 MB of memory"
end

CONTROLLER_CLUSTER_IP="10.3.0.1"

#Returns an Ip address based on num
def etcdIP(num)
  #return "172.17.4.#{num+50}"
  return "%s.#{num+50}" % $baseIp
end

def controllerIP(num)
  #return "172.17.4.#{num+100}"
  return "%s.#{num+100}" % $baseIp
end

def workerIP(num)
  #return "172.17.4.#{num+200}"
  return "%s.#{num+200}" % $baseIp
end

controllerIPs = [*1..$controller_count].map{ |i| controllerIP(i) } <<  CONTROLLER_CLUSTER_IP


# Generate etcd_endpoints which is a string of all etc servers in cluster. This will be provided
# to all worker and contoller nodes.
#
etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
puts etcdIPs
initial_etcd_cluster = etcdIPs.map.with_index{ |ip, i| "e#{i+1}=http://#{ip}:2380" }.join(",")
etcd_endpoints = etcdIPs.map.with_index{ |ip, i| "http://#{ip}:2379" }.join(",")



# Generate root CA
system("mkdir -p #{SSL_DIR} && ./../../lib/init-ssl-ca #{SSL_DIR}") or abort ("failed generating SSL artifacts")

# Generate admin key/cert
system("./../../lib/init-ssl #{SSL_DIR} admin kube-admin") or abort("failed generating admin SSL artifacts")

def provisionMachineSSL(machine,certBaseName,cn,ipAddrs)
  tarFile = "ssl/#{cn}.tar"
  ipString = ipAddrs.map.with_index { |ip, i| "IP.#{i+1}=#{ip}"}.join(",")
  system("./../../lib/init-ssl #{SSL_DIR} #{certBaseName} #{cn} #{ipString}") or abort("failed generating #{cn} SSL artifacts")
end


# Actual Vagrant Configuration starts here.

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 1151.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json" % $update_channel

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 1
    vb.gui = false
  end

  # Configure the etcd servers
  #
  # For each etcd server...
  (1..$etcd_count).each do |i|
  	
    config.vm.define vm_name = "e%d" % i do |etcd|

		# Read the Yaml configuration file into a single structured data element
      # data = YAML.load(IO.readlines(ETCD_CLOUD_CONFIG_PATH)[1..-1].join)
		#
		#replace the the value at node coreos-->etcd2-->initial-cluster with initial_etcd_cluster
      # data['coreos']['etcd2']['initial-cluster'] = initial_etcd_cluster
		#
		#...and write the new file out
      # etcd_config_file = Tempfile.new('etcd_config', :binmode => true)
      # etcd_config_file.write("#cloud-config\n#{data.to_yaml}")
      # etcd_config_file.close

      etcd.vm.hostname = vm_name

      etcd.vm.provider :virtualbox do |vb|
        vb.memory = $etcd_vm_memory
      end

      etcd.vm.network :private_network, ip: etcdIP(i)
      #etcd.vm.network :public_network, ip: etcdIP(i)
      
		# Compile the yaml based .ct file to json based Ignition Configuration File
		#
		system("ct -in-file=#{CT_ETC_PATH} -out-file=#{IGNITION_ETC_PATH} -platform vagrant-virtualbox -pretty -strict --files-dir .") or abort ("Failed generating etcd Ignition files.")

      etcd.vm.provider :virtualbox do |vb|
	 		config.ignition.enabled = true
			config.ignition.config_obj = :virtualbox
  		  	config.ignition.ip = etcdIP(i)
  		  	config.ignition.hostname = etcd.vm.hostname
  		  	config.ignition.drive_root = IGNITION_DRIVE_ROOT
  		  	config.ignition.drive_name = "configDskEtcd"+i.to_s

  		  	# when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
  		  	# and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
			#
  		  	if File.exist?(IGNITION_ETC_PATH)
  		   	 config.ignition.path = IGNITION_ETC_PATH
  		  	end
		end
    end
  end


  (1..$controller_count).each do |i|
    config.vm.define vm_name = "c%d" % i do |controller|

      env_file = File.new(CONTROLLER_ENV_OPTIONS, "w+")
      env_file.write("ETCD_ENDPOINTS=#{etcd_endpoints}\n")
      env_file.close

      controller.vm.hostname = vm_name

      controller.vm.provider :virtualbox do |vb|
        vb.memory = $controller_vm_memory
      end

      controllerIP = controllerIP(i)
      
		controller.vm.network :private_network, ip: controllerIP
		#controller.vm.network :public_network, ip: controllerIP

      # Each controller gets the same cert
      provisionMachineSSL(controller,"apiserver","kube-apiserver-#{controllerIP}",controllerIPs)

		system("ct -in-file=#{CT_CONTROLLER_PATH} -out-file=#{IGNITION_CONTROLLER_PATH} -platform vagrant-virtualbox -pretty -strict --files-dir .") or abort ("Failed generating Controller Ignition files.")

      controller.vm.provider :virtualbox do |vb|
	 		config.ignition.enabled = true
			config.ignition.config_obj = :virtualbox
  	  		config.ignition.ip = controllerIP
  	  		config.ignition.hostname = controller.vm.hostname
  	  		config.ignition.drive_root = IGNITION_DRIVE_ROOT
    		config.ignition.drive_name = "configDskController"+i.to_s
    		# when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
    		# and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
    		if File.exist?(IGNITION_CONTROLLER_PATH)
     			config.ignition.path = IGNITION_CONTROLLER_PATH
    		end
    	end
    end
  end


  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      env_file = File.new(WORKER_ENV_OPTIONS, "w+")
      env_file.write("ETCD_ENDPOINTS=#{etcd_endpoints}\n")
      env_file.write("CONTROLLER_ENDPOINT=https://#{controllerIPs[0]}:443\n") 
      env_file.close

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
      end

      workerIP = workerIP(i)
      worker.vm.network :private_network, ip: workerIP
      #worker.vm.network :public_network, ip: workerIP

      provisionMachineSSL(worker,"worker","kube-worker-#{workerIP}",[workerIP])

		system("ct -in-file=#{CT_WORKER_PATH} -out-file=#{IGNITION_WORKER_PATH} -platform vagrant-virtualbox -pretty -strict --files-dir .") or abort ("Failed generating Worker Ignition files.")

      worker.vm.provider :virtualbox do |vb|
	 		config.ignition.enabled = true
			config.ignition.config_obj = :virtualbox
  		  	config.ignition.ip = workerIP
  		  	config.ignition.hostname = worker.vm.hostname
  		  	config.ignition.drive_root = IGNITION_DRIVE_ROOT
  		  	config.ignition.drive_name = "configDskWorker"+i.to_s

  		  	# when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
  		  	# and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
			#
  		  	if File.exist?(IGNITION_WORKER_PATH)
  		 		config.ignition.path = IGNITION_WORKER_PATH
  		  	end
		end
  	  end
  end
end
